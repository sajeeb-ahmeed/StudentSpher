{"file_contents":{"replit.md":{"content":"# Student Results System\n\n## Overview\n\nA modern, 3D-animated web-based student results dashboard built with Express.js backend and vanilla HTML/CSS/JavaScript frontend. The system features a complete navigation structure with five main pages: Home, Leaderboard, My Scores, Task Submit, and Profile. The application showcases professional 3D design elements, glass morphism effects, and sophisticated animations while maintaining a clean, modern SaaS-style appearance.\n\n## Recent Changes (September 2025)\n\n- **Complete Authentication System**: Added PostgreSQL database with user registration, login, and session management using bcrypt password hashing\n- **Dynamic Data Integration**: Made leaderboard show real registered users and personalized My Scores page with actual user data\n- **Dark/Light Theme System**: Implemented comprehensive theme switching with localStorage preferences and smooth transitions\n- **Bengali/English Language Support**: Added complete translation system with 180+ translations and language preferences storage\n- **Modern 3D Design**: Upgraded entire UI with 3D card effects, glass morphism, and professional animations supporting both themes\n- **Enhanced User Experience**: Theme and language controls integrated into navigation with persistent preferences\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\nDesign preference: Modern, 3D, animated, professional, and attractive looking interfaces.\nLanguage support: English and Bengali (বাংলা) with complete translations.\nTheme support: Light and dark modes with user preference storage.\n\n## System Architecture\n\n### Frontend Architecture\n- **Technology Stack**: Vanilla HTML, CSS (Tailwind CSS with custom 3D animations), and JavaScript\n- **UI Framework**: Tailwind CSS with extensive custom CSS for 3D effects and animations\n- **Design System**: Modern SaaS-style dashboard with glass morphism, 3D cards, and gradient backgrounds\n- **Theme System**: \n  - Dark/Light mode toggle with localStorage persistence\n  - Comprehensive dark theme styling across all components\n  - Smooth color transitions with CSS variables\n  - Theme-aware 3D effects and animations\n- **Language System**:\n  - Bengali/English translation support with 180+ translations\n  - localStorage preference storage\n  - Dynamic content switching without page reload\n  - Translation data attributes for all user-facing content\n- **Animation Features**: \n  - Floating elements with rotation\n  - 3D card transformations on hover\n  - Glowing effects and pulsing animations\n  - Smooth fade-in and scale transitions\n  - Glass morphism with backdrop filters\n- **Client-Side Routing**: Complete navigation between all five pages\n- **Data Fetching**: Native fetch API with loading states and error handling\n- **Authentication**: Session-based authentication with protected routes\n- **User Experience**: Theme and language controls in navigation with real-time updates\n\n### Backend Architecture\n- **Framework**: Express.js with comprehensive middleware stack\n- **Database**: PostgreSQL with users, user_scores tables and proper relationships\n- **Authentication**: bcrypt password hashing with express-session management\n- **API Design**: RESTful endpoints with authentication middleware\n- **Security**: Password hashing, session management, and protected routes\n- **Data Storage**: PostgreSQL database with real user and score data\n- **Middleware**: CORS, express.json, express.static, express-session\n- **Route Handling**: Serves all pages with authentication checks\n- **Error Handling**: Comprehensive error handling with proper HTTP status codes\n\n### Page Structure\n- **Home (`/`)**: Hero section with 3D elements, feature showcase, and context-aware navigation\n- **Login (`/login.html`)**: Modern 3D authentication form with error handling\n- **Register (`/register.html`)**: User registration with instant sample data creation\n- **Leaderboard (`/leaderboard.html`)**: Real user rankings with 3D cards and trophy system\n- **My Scores (`/myscores.html`)**: Protected personal dashboard showing actual user scores with statistics\n- **Task Submit (`/submit.html`)**: Assignment submission form with modern styling\n- **Profile (`/profile.html`)**: User profile management with academic statistics\n\n### Key API Endpoints\n- `POST /api/register`: User registration with automatic sample data creation\n- `POST /api/login`: User authentication with session management\n- `POST /api/logout`: Session destruction and cleanup\n- `GET /api/auth-status`: Check current authentication status\n- `GET /api/leaderboard`: Returns sorted list of real registered users by total score\n- `GET /api/myscores`: Returns authenticated user's detailed score breakdown\n- `GET /`: Serves homepage with authentication-aware navigation\n- `GET /login.html`: Serves authentication form\n- `GET /register.html`: Serves user registration form\n- `GET /leaderboard.html`: Serves real user leaderboard\n- `GET /myscores.html`: Serves protected personal scores dashboard\n- `GET /submit.html`: Serves task submission page\n- `GET /profile.html`: Serves user profile page\n\n### Design Features\n- **Dual Theme System**: \n  - Light mode with clean whites and subtle shadows\n  - Dark mode with rich grays and enhanced contrast\n  - Automatic theme-aware color adjustments\n  - Smooth transitions between themes\n- **3D Card System**: Perspective-based transforms with hover effects supporting both themes\n- **Glass Morphism**: Backdrop filters with transparency adapted for light/dark modes\n- **Gradient Backgrounds**: Multi-color gradients optimized for both themes\n- **Language Toggle**: Real-time Bengali/English switching with persistent preferences\n- **Animation System**: \n  - Float animations for floating elements\n  - Glow effects for emphasis\n  - Scale and rotation transforms\n  - Fade-in sequences with delays\n  - Theme-aware animations and effects\n- **Professional Color Palette**: Blue, purple, and white with dark mode variants\n- **Modern Typography**: Gradient text effects and varied font weights with theme support\n\n### Data Structure\n- **User Records**: Real PostgreSQL users with bcrypt hashed passwords, full names, usernames, emails\n- **Score Details**: Real user_scores table with task-specific scores linked to users\n- **Authentication Sessions**: Session-based auth with express-session and secure storage\n- **User Preferences**: localStorage-based theme and language preferences\n- **Sample Data**: Automatic sample score generation for new users\n- **Database Schema**: Proper relational design with foreign key constraints\n\n## External Dependencies\n\n### NPM Packages\n- **express**: Web application framework for Node.js\n- **cors**: Cross-Origin Resource Sharing middleware\n\n### CDN Resources\n- **Tailwind CSS**: Utility-first CSS framework loaded via CDN with dark mode support\n- **Font Awesome**: Icon library for UI elements, animations, and theme/language controls\n- **UI Avatars**: Service for generating user avatar images for real users\n\n### Third-Party Services\n- **ui-avatars.com**: Generates colored avatar images with initials for registered users\n- **PostgreSQL Database**: Professional database for user management and score tracking\n- **Express Session**: Secure session management for authentication\n- **bcrypt**: Industry-standard password hashing for security\n- **Translation System**: Built-in Bengali/English language support with localStorage persistence","size_bytes":7419},"server.js":{"content":"const express = require('express');\nconst cors = require('cors');\nconst path = require('path');\nconst bcrypt = require('bcryptjs');\nconst session = require('express-session');\nconst { Pool } = require('pg');\n\nconst app = express();\nconst PORT = process.env.PORT || 5000;\n\n// Database connection\nconst pool = new Pool({\n  connectionString: process.env.DATABASE_URL,\n  ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false\n});\n\n// Middleware\napp.use(cors());\napp.use(express.json());\napp.use(express.urlencoded({ extended: true }));\napp.use(express.static('public'));\n\n// Session middleware\napp.use(session({\n  secret: 'student-dashboard-secret-key',\n  resave: false,\n  saveUninitialized: false,\n  cookie: { \n    secure: false, // Set to true in production with HTTPS\n    maxAge: 24 * 60 * 60 * 1000 // 24 hours\n  }\n}));\n\n// Authentication middleware\nconst requireAuth = (req, res, next) => {\n  if (req.session.userId) {\n    next();\n  } else {\n    res.status(401).json({ error: 'Authentication required' });\n  }\n};\n\n// Helper function to generate avatar URL\nconst generateAvatar = (name) => {\n  const colors = ['3b82f6', '10b981', 'f59e0b', 'ef4444', '8b5cf6', '06b6d4', 'ec4899', '84cc16'];\n  const randomColor = colors[Math.floor(Math.random() * colors.length)];\n  return `https://ui-avatars.com/api/?name=${encodeURIComponent(name)}&background=${randomColor}&color=fff&size=150`;\n};\n\n// Authentication Routes\napp.post('/api/register', async (req, res) => {\n  try {\n    const { username, email, password, fullName } = req.body;\n    \n    // Basic validation\n    if (!username || !email || !password || !fullName) {\n      return res.status(400).json({ error: 'All fields are required' });\n    }\n\n    if (password.length < 6) {\n      return res.status(400).json({ error: 'Password must be at least 6 characters' });\n    }\n\n    // Check if user exists\n    const existingUser = await pool.query(\n      'SELECT id FROM users WHERE username = $1 OR email = $2',\n      [username, email]\n    );\n\n    if (existingUser.rows.length > 0) {\n      return res.status(400).json({ error: 'Username or email already exists' });\n    }\n\n    // Hash password\n    const saltRounds = 10;\n    const hashedPassword = await bcrypt.hash(password, saltRounds);\n\n    // Create user\n    const result = await pool.query(\n      'INSERT INTO users (username, email, password, full_name) VALUES ($1, $2, $3, $4) RETURNING id, username, email, full_name',\n      [username, email, hashedPassword, fullName]\n    );\n\n    const newUser = result.rows[0];\n\n    // Add some sample scores for new user\n    const sampleScores = [\n      { task_name: 'JavaScript Fundamentals', score: Math.floor(Math.random() * 20) + 80 },\n      { task_name: 'HTML & CSS Basics', score: Math.floor(Math.random() * 20) + 75 },\n      { task_name: 'React Components', score: Math.floor(Math.random() * 25) + 70 }\n    ];\n\n    for (const scoreData of sampleScores) {\n      await pool.query(\n        'INSERT INTO user_scores (user_id, task_name, score) VALUES ($1, $2, $3)',\n        [newUser.id, scoreData.task_name, scoreData.score]\n      );\n    }\n\n    // Set session\n    req.session.userId = newUser.id;\n    req.session.username = newUser.username;\n\n    res.json({\n      message: 'Registration successful',\n      user: {\n        id: newUser.id,\n        username: newUser.username,\n        email: newUser.email,\n        full_name: newUser.full_name\n      }\n    });\n\n  } catch (error) {\n    console.error('Registration error:', error);\n    res.status(500).json({ error: 'Internal server error' });\n  }\n});\n\napp.post('/api/login', async (req, res) => {\n  try {\n    const { username, password } = req.body;\n\n    if (!username || !password) {\n      return res.status(400).json({ error: 'Username and password are required' });\n    }\n\n    // Find user\n    const result = await pool.query(\n      'SELECT id, username, email, password, full_name FROM users WHERE username = $1 OR email = $1',\n      [username]\n    );\n\n    const user = result.rows[0];\n    if (!user) {\n      return res.status(401).json({ error: 'Invalid username or password' });\n    }\n\n    // Check password\n    const passwordMatch = await bcrypt.compare(password, user.password);\n    if (!passwordMatch) {\n      return res.status(401).json({ error: 'Invalid username or password' });\n    }\n\n    // Set session\n    req.session.userId = user.id;\n    req.session.username = user.username;\n\n    res.json({\n      message: 'Login successful',\n      user: {\n        id: user.id,\n        username: user.username,\n        email: user.email,\n        full_name: user.full_name\n      }\n    });\n\n  } catch (error) {\n    console.error('Login error:', error);\n    res.status(500).json({ error: 'Internal server error' });\n  }\n});\n\napp.post('/api/logout', (req, res) => {\n  req.session.destroy((err) => {\n    if (err) {\n      return res.status(500).json({ error: 'Could not log out' });\n    }\n    res.json({ message: 'Logout successful' });\n  });\n});\n\n// Check authentication status\napp.get('/api/auth/status', (req, res) => {\n  if (req.session.userId) {\n    res.json({ \n      authenticated: true, \n      userId: req.session.userId,\n      username: req.session.username\n    });\n  } else {\n    res.json({ authenticated: false });\n  }\n});\n\n// Dynamic API Routes\napp.get('/api/leaderboard', async (req, res) => {\n  try {\n    const result = await pool.query(`\n      SELECT \n        u.id,\n        u.full_name as name,\n        u.username,\n        COALESCE(AVG(us.score), 0) as total_score,\n        COUNT(us.id) as total_submissions\n      FROM users u\n      LEFT JOIN user_scores us ON u.id = us.user_id\n      GROUP BY u.id, u.full_name, u.username\n      ORDER BY total_score DESC\n    `);\n\n    const leaderboard = result.rows.map(user => ({\n      name: user.name,\n      username: user.username,\n      avatar: generateAvatar(user.name),\n      total_score: Math.round(user.total_score),\n      total_submissions: parseInt(user.total_submissions)\n    }));\n\n    res.json(leaderboard);\n  } catch (error) {\n    console.error('Leaderboard error:', error);\n    res.status(500).json({ error: 'Failed to load leaderboard' });\n  }\n});\n\napp.get('/api/myscores', requireAuth, async (req, res) => {\n  try {\n    const userId = req.session.userId;\n\n    // Get user scores\n    const scoresResult = await pool.query(\n      'SELECT task_name, score, submitted_at FROM user_scores WHERE user_id = $1 ORDER BY submitted_at DESC',\n      [userId]\n    );\n\n    const scores = scoresResult.rows;\n    const total = scores.length > 0 ? Math.round(scores.reduce((sum, score) => sum + score.score, 0) / scores.length) : 0;\n\n    res.json({\n      total: total,\n      scores: scores.map(score => ({\n        task_name: score.task_name,\n        score: score.score\n      }))\n    });\n\n  } catch (error) {\n    console.error('My scores error:', error);\n    res.status(500).json({ error: 'Failed to load your scores' });\n  }\n});\n\n// Add score endpoint\napp.post('/api/scores', requireAuth, async (req, res) => {\n  try {\n    const { taskName, score } = req.body;\n    const userId = req.session.userId;\n\n    if (!taskName || score === undefined || score < 0 || score > 100) {\n      return res.status(400).json({ error: 'Valid task name and score (0-100) are required' });\n    }\n\n    await pool.query(\n      'INSERT INTO user_scores (user_id, task_name, score) VALUES ($1, $2, $3)',\n      [userId, taskName, score]\n    );\n\n    res.json({ message: 'Score added successfully' });\n  } catch (error) {\n    console.error('Add score error:', error);\n    res.status(500).json({ error: 'Failed to add score' });\n  }\n});\n\n// Serve HTML files\napp.get('/', (req, res) => {\n  res.sendFile(path.join(__dirname, 'public', 'index.html'));\n});\n\napp.get('/leaderboard.html', (req, res) => {\n  res.sendFile(path.join(__dirname, 'public', 'leaderboard.html'));\n});\n\napp.get('/myscores.html', (req, res) => {\n  res.sendFile(path.join(__dirname, 'public', 'myscores.html'));\n});\n\napp.get('/submit.html', (req, res) => {\n  res.sendFile(path.join(__dirname, 'public', 'submit.html'));\n});\n\napp.get('/profile.html', (req, res) => {\n  res.sendFile(path.join(__dirname, 'public', 'profile.html'));\n});\n\napp.get('/login.html', (req, res) => {\n  res.sendFile(path.join(__dirname, 'public', 'login.html'));\n});\n\napp.get('/register.html', (req, res) => {\n  res.sendFile(path.join(__dirname, 'public', 'register.html'));\n});\n\napp.listen(PORT, '0.0.0.0', () => {\n  console.log(`Server running on http://0.0.0.0:${PORT}`);\n});","size_bytes":8447},"public/js/theme-lang.js":{"content":"// Theme and Language Management System\nclass ThemeLangManager {\n    constructor() {\n        this.currentTheme = localStorage.getItem('theme') || 'light';\n        this.currentLanguage = localStorage.getItem('language') || 'en';\n        this.init();\n    }\n\n    init() {\n        this.applyTheme();\n        this.updateLanguage();\n        this.createControls();\n    }\n\n    // Theme Management\n    toggleTheme() {\n        this.currentTheme = this.currentTheme === 'light' ? 'dark' : 'light';\n        localStorage.setItem('theme', this.currentTheme);\n        this.applyTheme();\n    }\n\n    applyTheme() {\n        if (this.currentTheme === 'dark') {\n            document.documentElement.classList.add('dark');\n        } else {\n            document.documentElement.classList.remove('dark');\n        }\n    }\n\n    // Language Management\n    setLanguage(lang) {\n        this.currentLanguage = lang;\n        localStorage.setItem('language', lang);\n        this.updateLanguage();\n    }\n\n    updateLanguage() {\n        const elements = document.querySelectorAll('[data-translate]');\n        elements.forEach(element => {\n            const key = element.getAttribute('data-translate');\n            if (translations[this.currentLanguage] && translations[this.currentLanguage][key]) {\n                if (element.placeholder !== undefined) {\n                    element.placeholder = translations[this.currentLanguage][key];\n                } else {\n                    element.innerHTML = translations[this.currentLanguage][key];\n                }\n            }\n        });\n\n        // Update page title\n        const titleKey = document.querySelector('title')?.getAttribute('data-translate');\n        if (titleKey && translations[this.currentLanguage] && translations[this.currentLanguage][titleKey]) {\n            document.title = translations[this.currentLanguage][titleKey];\n        }\n    }\n\n    createControls() {\n        // Create theme and language controls\n        const controlsHTML = `\n            <div class=\"flex items-center space-x-4\">\n                <!-- Theme Toggle -->\n                <button onclick=\"themeLangManager.toggleTheme()\" class=\"p-2 rounded-lg bg-white/10 dark:bg-gray-800/50 backdrop-blur-md border border-white/20 dark:border-gray-700 hover:bg-white/20 dark:hover:bg-gray-700/50 transition-all duration-300\">\n                    <i class=\"fas fa-sun text-yellow-500 dark:hidden\"></i>\n                    <i class=\"fas fa-moon text-blue-400 hidden dark:inline\"></i>\n                </button>\n                \n                <!-- Language Toggle -->\n                <div class=\"relative\">\n                    <button onclick=\"this.nextElementSibling.classList.toggle('hidden')\" class=\"p-2 px-3 rounded-lg bg-white/10 dark:bg-gray-800/50 backdrop-blur-md border border-white/20 dark:border-gray-700 hover:bg-white/20 dark:hover:bg-gray-700/50 transition-all duration-300 flex items-center space-x-2\">\n                        <i class=\"fas fa-globe text-blue-600 dark:text-blue-400\"></i>\n                        <span class=\"text-sm font-medium text-gray-700 dark:text-gray-300\">${this.currentLanguage.toUpperCase()}</span>\n                    </button>\n                    <div class=\"absolute right-0 mt-2 w-32 bg-white dark:bg-gray-800 rounded-lg shadow-lg border border-gray-200 dark:border-gray-700 hidden z-50\">\n                        <button onclick=\"themeLangManager.setLanguage('en'); this.parentElement.classList.add('hidden')\" class=\"w-full px-4 py-2 text-left hover:bg-gray-100 dark:hover:bg-gray-700 rounded-t-lg transition-colors text-gray-700 dark:text-gray-300\">\n                            🇺🇸 English\n                        </button>\n                        <button onclick=\"themeLangManager.setLanguage('bn'); this.parentElement.classList.add('hidden')\" class=\"w-full px-4 py-2 text-left hover:bg-gray-100 dark:hover:bg-gray-700 rounded-b-lg transition-colors text-gray-700 dark:text-gray-300\">\n                            🇧🇩 বাংলা\n                        </button>\n                    </div>\n                </div>\n            </div>\n        `;\n\n        // Add controls to navigation if it exists\n        const authNavigation = document.getElementById('authNavigation');\n        if (authNavigation) {\n            const controlsDiv = document.createElement('div');\n            controlsDiv.innerHTML = controlsHTML;\n            authNavigation.appendChild(controlsDiv.firstElementChild);\n        }\n    }\n\n    // Get translated text\n    t(key) {\n        return translations[this.currentLanguage]?.[key] || key;\n    }\n}\n\n// Translation Dictionary\nconst translations = {\n    en: {\n        // Navigation\n        'nav.home': 'Home',\n        'nav.leaderboard': 'Leaderboard',\n        'nav.myscores': 'My Scores',\n        'nav.submit': 'Task Submit',\n        'nav.profile': 'Profile',\n        'nav.login': 'Login',\n        'nav.register': 'Register',\n        'nav.logout': 'Logout',\n        \n        // Home Page\n        'home.title': 'StudyDash - Student Results Dashboard',\n        'home.welcome': 'Welcome to',\n        'home.subtitle': 'Your ultimate student performance dashboard. Track scores, compete on leaderboards, and achieve academic excellence.',\n        'home.view-leaderboard': 'View Leaderboard',\n        'home.my-progress': 'My Progress',\n        'home.get-started': 'Get Started',\n        'home.sign-in': 'Sign In',\n        'home.features': 'Powerful Features',\n        'home.features-subtitle': 'Everything you need to track and improve your academic performance',\n        'home.feature1.title': 'Leaderboard',\n        'home.feature1.desc': 'See how you rank against your peers with real-time leaderboard updates and competitive scoring.',\n        'home.feature2.title': 'Progress Tracking',\n        'home.feature2.desc': 'Monitor your academic progress with detailed analytics and performance insights.',\n        'home.feature3.title': 'Task Management',\n        'home.feature3.desc': 'Submit assignments and track your submissions with our intuitive task management system.',\n        \n        // Leaderboard Page\n        'leaderboard.title': 'Leaderboard - Student Results Dashboard',\n        'leaderboard.heading': 'Leaderboard',\n        'leaderboard.subtitle': 'See how you stack up against your peers. Rankings are based on total scores across all assignments.',\n        'leaderboard.loading': 'Loading leaderboard...',\n        'leaderboard.error': 'Failed to load leaderboard. Please try again later.',\n        'leaderboard.points': 'points',\n        'leaderboard.submissions': 'submissions',\n        'leaderboard.rank': 'Current Rank',\n        \n        // My Scores Page\n        'myscores.title': 'My Scores - Student Results Dashboard',\n        'myscores.heading': 'My Scores',\n        'myscores.subtitle': 'Track your progress and see how you\\'re performing across all your assignments.',\n        'myscores.loading': 'Loading your scores...',\n        'myscores.error': 'Failed to load your scores. Please try again later.',\n        'myscores.total-score': 'Your Total Score',\n        'myscores.great-work': 'Outstanding performance! Keep shining!',\n        'myscores.assignment-breakdown': 'Assignment Breakdown',\n        'myscores.assignment-score': 'Assignment Score',\n        'myscores.performance-summary': 'Performance Summary',\n        'myscores.average-score': 'Average Score',\n        'myscores.highest-score': 'Highest Score',\n        'myscores.lowest-score': 'Lowest Score',\n        \n        // Login Page\n        'login.title': 'Login - StudyDash',\n        'login.welcome-back': 'Welcome Back',\n        'login.subtitle': 'Sign in to your StudyDash account',\n        'login.username': 'Username or Email',\n        'login.password': 'Password',\n        'login.username-placeholder': 'Enter your username or email',\n        'login.password-placeholder': 'Enter your password',\n        'login.sign-in': 'Sign In',\n        'login.signing-in': 'Signing In...',\n        'login.no-account': 'Don\\'t have an account?',\n        'login.sign-up-here': 'Sign up here',\n        \n        // Register Page\n        'register.title': 'Register - StudyDash',\n        'register.join': 'Join StudyDash',\n        'register.subtitle': 'Create your account and start learning',\n        'register.full-name': 'Full Name',\n        'register.username': 'Username',\n        'register.email': 'Email Address',\n        'register.password': 'Password',\n        'register.full-name-placeholder': 'Enter your full name',\n        'register.username-placeholder': 'Choose a username',\n        'register.email-placeholder': 'Enter your email',\n        'register.password-placeholder': 'Create a secure password',\n        'register.password-hint': 'Password must be at least 6 characters long',\n        'register.create-account': 'Create Account',\n        'register.creating-account': 'Creating Account...',\n        'register.have-account': 'Already have an account?',\n        'register.sign-in-here': 'Sign in here',\n        \n        // Submit Page\n        'submit.title': 'Task Submit - StudyDash',\n        'submit.heading': 'Submit Task',\n        'submit.subtitle': 'Submit your assignments and get instant feedback',\n        'submit.assignment-title': 'Assignment Title',\n        'submit.description': 'Description',\n        'submit.upload-files': 'Upload Files',\n        'submit.assignment-title-placeholder': 'Enter assignment title',\n        'submit.description-placeholder': 'Describe your submission',\n        'submit.upload-hint': 'Drag and drop files or click to browse',\n        'submit.submit-assignment': 'Submit Assignment',\n        \n        // Profile Page\n        'profile.title': 'Profile - StudyDash',\n        'profile.heading': 'My Profile',\n        'profile.subtitle': 'Manage your account settings and preferences',\n        'profile.profile-info': 'Profile Information',\n        'profile.academic-stats': 'Academic Stats',\n        'profile.full-name': 'Full Name',\n        'profile.email': 'Email',\n        'profile.student-id': 'Student ID',\n        'profile.current-gpa': 'Current GPA',\n        'profile.total-submissions': 'Total Submissions',\n        'profile.average-score': 'Average Score',\n        'profile.update-profile': 'Update Profile',\n        'profile.joined': 'Joined March 2024',\n        'profile.rank': 'Rank #1'\n    },\n    \n    bn: {\n        // Navigation\n        'nav.home': 'হোম',\n        'nav.leaderboard': 'লিডারবোর্ড',\n        'nav.myscores': 'আমার স্কোর',\n        'nav.submit': 'কাজ জমা দিন',\n        'nav.profile': 'প্রোফাইল',\n        'nav.login': 'লগইন',\n        'nav.register': 'নিবন্ধন',\n        'nav.logout': 'লগআউট',\n        \n        // Home Page\n        'home.title': 'স্টাডিড্যাশ - ছাত্র ফলাফল ড্যাশবোর্ড',\n        'home.welcome': 'স্বাগতম',\n        'home.subtitle': 'আপনার চূড়ান্ত ছাত্র পারফরম্যান্স ড্যাশবোর্ড। স্কোর ট্র্যাক করুন, লিডারবোর্ডে প্রতিযোগিতা করুন এবং একাডেমিক উৎকর্ষতা অর্জন করুন।',\n        'home.view-leaderboard': 'লিডারবোর্ড দেখুন',\n        'home.my-progress': 'আমার অগ্রগতি',\n        'home.get-started': 'শুরু করুন',\n        'home.sign-in': 'সাইন ইন',\n        'home.features': 'শক্তিশালী বৈশিষ্ট্য',\n        'home.features-subtitle': 'আপনার একাডেমিক পারফরম্যান্স ট্র্যাক এবং উন্নত করার জন্য প্রয়োজনীয় সবকিছু',\n        'home.feature1.title': 'লিডারবোর্ড',\n        'home.feature1.desc': 'রিয়েল-টাইম লিডারবোর্ড আপডেট এবং প্রতিযোগিতামূলক স্কোরিং সহ আপনার সহপাঠীদের বিপরীতে আপনার অবস্থান দেখুন।',\n        'home.feature2.title': 'অগ্রগতি ট্র্যাকিং',\n        'home.feature2.desc': 'বিস্তারিত বিশ্লেষণ এবং পারফরম্যান্স অন্তর্দৃষ্টি সহ আপনার একাডেমিক অগ্রগতি পর্যবেক্ষণ করুন।',\n        'home.feature3.title': 'কাজ ব্যবস্থাপনা',\n        'home.feature3.desc': 'আমাদের স্বজ্ঞাত কাজ ব্যবস্থাপনা সিস্টেম দিয়ে অ্যাসাইনমেন্ট জমা দিন এবং আপনার জমা ট্র্যাক করুন।',\n        \n        // Leaderboard Page\n        'leaderboard.title': 'লিডারবোর্ড - ছাত্র ফলাফল ড্যাশবোর্ড',\n        'leaderboard.heading': 'লিডারবোর্ড',\n        'leaderboard.subtitle': 'দেখুন আপনি আপনার সহপাঠীদের তুলনায় কোথায় দাঁড়িয়ে। র‍্যাঙ্কিং সমস্ত অ্যাসাইনমেন্ট জুড়ে মোট স্কোরের উপর ভিত্তি করে।',\n        'leaderboard.loading': 'লিডারবোর্ড লোড হচ্ছে...',\n        'leaderboard.error': 'লিডারবোর্ড লোড করতে ব্যর্থ। অনুগ্রহ করে আবার চেষ্টা করুন।',\n        'leaderboard.points': 'পয়েন্ট',\n        'leaderboard.submissions': 'জমা',\n        'leaderboard.rank': 'বর্তমান র‍্যাঙ্ক',\n        \n        // My Scores Page\n        'myscores.title': 'আমার স্কোর - ছাত্র ফলাফল ড্যাশবোর্ড',\n        'myscores.heading': 'আমার স্কোর',\n        'myscores.subtitle': 'আপনার অগ্রগতি ট্র্যাক করুন এবং আপনার সমস্ত অ্যাসাইনমেন্ট জুড়ে আপনার পারফরম্যান্স দেখুন।',\n        'myscores.loading': 'আপনার স্কোর লোড হচ্ছে...',\n        'myscores.error': 'আপনার স্কোর লোড করতে ব্যর্থ। অনুগ্রহ করে আবার চেষ্টা করুন।',\n        'myscores.total-score': 'আপনার মোট স্কোর',\n        'myscores.great-work': 'অসাধারণ পারফরম্যান্স! চালিয়ে যান!',\n        'myscores.assignment-breakdown': 'অ্যাসাইনমেন্ট বিভাজন',\n        'myscores.assignment-score': 'অ্যাসাইনমেন্ট স্কোর',\n        'myscores.performance-summary': 'পারফরম্যান্স সারসংক্ষেপ',\n        'myscores.average-score': 'গড় স্কোর',\n        'myscores.highest-score': 'সর্বোচ্চ স্কোর',\n        'myscores.lowest-score': 'সর্বনিম্ন স্কোর',\n        \n        // Login Page\n        'login.title': 'লগইন - স্টাডিড্যাশ',\n        'login.welcome-back': 'ফিরে স্বাগতম',\n        'login.subtitle': 'আপনার স্টাডিড্যাশ অ্যাকাউন্টে সাইন ইন করুন',\n        'login.username': 'ব্যবহারকারীর নাম বা ইমেইল',\n        'login.password': 'পাসওয়ার্ড',\n        'login.username-placeholder': 'আপনার ব্যবহারকারীর নাম বা ইমেইল লিখুন',\n        'login.password-placeholder': 'আপনার পাসওয়ার্ড লিখুন',\n        'login.sign-in': 'সাইন ইন',\n        'login.signing-in': 'সাইন ইন হচ্ছে...',\n        'login.no-account': 'কোনো অ্যাকাউন্ট নেই?',\n        'login.sign-up-here': 'এখানে সাইন আপ করুন',\n        \n        // Register Page\n        'register.title': 'নিবন্ধন - স্টাডিড্যাশ',\n        'register.join': 'স্টাডিড্যাশে যোগ দিন',\n        'register.subtitle': 'আপনার অ্যাকাউন্ট তৈরি করুন এবং শেখা শুরু করুন',\n        'register.full-name': 'পূর্ণ নাম',\n        'register.username': 'ব্যবহারকারীর নাম',\n        'register.email': 'ইমেইল ঠিকানা',\n        'register.password': 'পাসওয়ার্ড',\n        'register.full-name-placeholder': 'আপনার পূর্ণ নাম লিখুন',\n        'register.username-placeholder': 'একটি ব্যবহারকারীর নাম বেছে নিন',\n        'register.email-placeholder': 'আপনার ইমেইল লিখুন',\n        'register.password-placeholder': 'একটি নিরাপদ পাসওয়ার্ড তৈরি করুন',\n        'register.password-hint': 'পাসওয়ার্ড কমপক্ষে ৬ অক্ষরের হতে হবে',\n        'register.create-account': 'অ্যাকাউন্ট তৈরি করুন',\n        'register.creating-account': 'অ্যাকাউন্ট তৈরি হচ্ছে...',\n        'register.have-account': 'ইতিমধ্যে একটি অ্যাকাউন্ট আছে?',\n        'register.sign-in-here': 'এখানে সাইন ইন করুন',\n        \n        // Submit Page\n        'submit.title': 'কাজ জমা - স্টাডিড্যাশ',\n        'submit.heading': 'কাজ জমা দিন',\n        'submit.subtitle': 'আপনার অ্যাসাইনমেন্ট জমা দিন এবং তাৎক্ষণিক ফিডব্যাক পান',\n        'submit.assignment-title': 'অ্যাসাইনমেন্টের শিরোনাম',\n        'submit.description': 'বিবরণ',\n        'submit.upload-files': 'ফাইল আপলোড করুন',\n        'submit.assignment-title-placeholder': 'অ্যাসাইনমেন্টের শিরোনাম লিখুন',\n        'submit.description-placeholder': 'আপনার জমার বর্ণনা দিন',\n        'submit.upload-hint': 'ফাইল টেনে এনে ছাড়ুন বা ব্রাউজ করতে ক্লিক করুন',\n        'submit.submit-assignment': 'অ্যাসাইনমেন্ট জমা দিন',\n        \n        // Profile Page\n        'profile.title': 'প্রোফাইল - স্টাডিড্যাশ',\n        'profile.heading': 'আমার প্রোফাইল',\n        'profile.subtitle': 'আপনার অ্যাকাউন্ট সেটিংস এবং পছন্দ পরিচালনা করুন',\n        'profile.profile-info': 'প্রোফাইল তথ্য',\n        'profile.academic-stats': 'একাডেমিক পরিসংখ্যান',\n        'profile.full-name': 'পূর্ণ নাম',\n        'profile.email': 'ইমেইল',\n        'profile.student-id': 'ছাত্র আইডি',\n        'profile.current-gpa': 'বর্তমান জিপিএ',\n        'profile.total-submissions': 'মোট জমা',\n        'profile.average-score': 'গড় স্কোর',\n        'profile.update-profile': 'প্রোফাইল আপডেট করুন',\n        'profile.joined': 'যোগদান মার্চ ২০২৪',\n        'profile.rank': 'র‍্যাঙ্ক #১'\n    }\n};\n\n// Initialize theme and language manager\nlet themeLangManager;\ndocument.addEventListener('DOMContentLoaded', () => {\n    themeLangManager = new ThemeLangManager();\n});","size_bytes":20548}},"version":1}